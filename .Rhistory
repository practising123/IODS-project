por <- read.csv("data/student-por.csv", sep = ";", header=TRUE)
summary(mat)
dim(mat)
str(mat)
summary(por)
dim(por)
str(por)
join_by <- c( "school", "sex", "age", "address", "famsize", "Pstatus", "Medu", "Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
dim(mat_por)
mat_por <- inner_join(mat, por, by = join_by, suffix = c(".mat", ".por"))
dim(mat_por)
str(mat_por)
summary(mat_por)
glimpse(mat_por)
colnames(mat_por)
# create a new data frame with only the joined columns
alc <- select(mat_por, one_of(join_by))
# the columns in the datasets which were not used for joining the data
notjoined_columns <- colnames(mat)[!colnames(mat) %in% join_by]
# print out the columns not used for joining
notjoined_columns
# for every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'mat_por' with the same original name
two_columns <- select(mat_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- select(two_columns,1)
}
}
alc <- mutate(alc, alc_use = Dalc.por + Walc.por / 2)
alc <- mutate(alc, high_use = alc_use > 2.0)
dim(mat_por)
str(mat_por)
summary(mat_por)
glimpse(mat_por)
colnames(mat_por)
#practising123
#14.1.2019
#this is wrangling part for chapter 3, the tables are Student performansce data that can be studied or downloaded here: https://archive.ics.uci.edu/ml/datasets/Student+Performance
library(dplyr)
library(ggplot2)
library(GGally)
mat <- read.table("data/student-mat.csv",sep = ";", header=TRUE)
por <- read.csv("data/student-por.csv", sep = ";", header=TRUE)
summary(mat)
dim(mat)
str(mat)
summary(por)
dim(por)
str(por)
join_by <- c( "school", "sex", "age", "address", "famsize", "Pstatus", "Medu", "Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
dim(mat_por)
mat_por <- inner_join(mat, por, by = join_by, suffix = c(".mat", ".por"))
dim(mat_por)
str(mat_por)
summary(mat_por)
glimpse(mat_por)
colnames(mat_por)
# create a new data frame with only the joined columns
alc <- select(mat_por, one_of(join_by))
# the columns in the datasets which were not used for joining the data
notjoined_columns <- colnames(mat)[!colnames(mat) %in% join_by]
# print out the columns not used for joining
notjoined_columns
# for every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'mat_por' with the same original name
two_columns <- select(mat_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- select(two_columns,1)
}
}
alc <- mutate(alc, alc_use = Dalc.por + Walc.por / 2)
alc <- mutate(alc, high_use = alc_use > 2.0)
alc <- mutate(alc, alc_use = Dalc + Walc.por / 2)
alc <- mutate(alc, alc_use = Dalc + Walc / 2)
alc <- mutate(alc, high_use = alc_use > 2.0)
#practising123
#14.1.2019
#this is wrangling part for chapter 3, the tables are Student performansce data that can be studied or downloaded here: https://archive.ics.uci.edu/ml/datasets/Student+Performance
library(dplyr)
library(ggplot2)
library(GGally)
mat <- read.table("data/student-mat.csv",sep = ";", header=TRUE)
por <- read.csv("data/student-por.csv", sep = ";", header=TRUE)
summary(mat)
dim(mat)
str(mat)
summary(por)
dim(por)
str(por)
join_by <- c( "school", "sex", "age", "address", "famsize", "Pstatus", "Medu", "Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
dim(mat_por)
mat_por <- inner_join(mat, por, by = join_by, suffix = c(".mat", ".por"))
dim(mat_por)
str(mat_por)
summary(mat_por)
glimpse(mat_por)
colnames(mat_por)
# create a new data frame with only the joined columns
alc <- select(mat_por, one_of(join_by))
# the columns in the datasets which were not used for joining the data
notjoined_columns <- colnames(mat)[!colnames(mat) %in% join_by]
# print out the columns not used for joining
notjoined_columns
# for every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'mat_por' with the same original name
two_columns <- select(mat_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- select(two_columns,1)
}
}
alc <- mutate(alc, alc_use = Dalc + Walc / 2)
alc <- mutate(alc, high_use = alc_use > 2.0)
write.table()
write.table("data/alc.csv")
1
write.table("data/alc.csv")
x
1
write.table("data\alc.csv")
1
2
write.table(alc, file = "data/alc.csv", row.names = TRUE)
knitr::opts_chunk$set(echo = TRUE)
alc <- read.table("data/alc.csv")
dim(alc)
str(alc)
alc <- read.table("data/alc.csv",header = TRUE)
str(alc)
glimpse(alc)
alc2 <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep = ",", header = TRUE)
glimpse(alc2)
colnames(alc)
alc <- read.table("data/alc.csv",header = TRUE)
colnames(alc)
library(tidyr)
library((ggpolt))
library(ggplot2)
library((ggplot))
library(ggplot)
library(ggplot2)
install.packages("dplyr")
install.packages("dplyr")
install.packages("tidyverse")
library(dplyr)
library(tidyr)
library(ggplot2)
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
gather(alc) %>% glimpse
alc %>% group_by(sex, high_use) %>% summarise(count = n(),mean_grade = mean(G3))
dim(alc)
alc %>% group_by(sex, high_use) %>% summarise(count = n(),mean_grade = mean(G3))
alc %>% group_by(sex, high_use) %>% summarise(count = n())
,mean_grade = mean(G3)
alc %>% group_by(sex, high_use) %>% summarise(count = n(),mean_grade = mean(G3))
alc %>% group_by(sex, high_use) %>% summarise(count = n())
alc %>% group_by(sex, high_use)
alc %>% group_by(sex, high_use, Pstatus) %>% summarise(count = n())
gather(alc) %>% glimpse
alc %>% group_by(high_use, sex) %>% summarise(count = n())
alc %>% group_by(high_use, sex) %>% summarise()
alc %>% group_by(high_use, sex) %>% summarise(count = n())
alc %>% group_by(high_use, absences) %>% summarise(count = n())
alc %>% group_by(high_use, pstatus) %>% summarise(count = n())
alc %>% group_by(high_use, Pstatus) %>% summarise(count = n())
alc %>% group_by( Pstatus, high_use) %>% summarise(count = n())
alc$high_use
mean(alc$high_use)
summarise(alc$high_use)
summarise(alc$high_use)
summarize(alc$high_use)
summarize(alc$high_use)
table <-(alc$high_use)
summarise(table)
library(GGally)
summarise(table)
table
table <-(alc$high_use, high_use = TRUE)
table <-(alc, high_use = TRUE)
table <-cut(alc, high_use = TRUE)
table <-select(alc, high_use = TRUE)
table <-select(alc$high_use = TRUE)
table <-select(alc$high_use = "TRUE")
alc %>% group_by( Pstatus, high_use) %>% summarise(count = n())
alc %>% group_by(high_use, absences) %>% summarise(count = n())
alc %>% group_by(high_use, absences) %>% summarise(count = n())
alc %>% group_by(high_use, sex) %>% summarise(count = n())
#worked differently then expected: in 38 situations parents lived apart and there´s 0.37 propability that student is high user. In situation where families lived together (364), 160 students reported high use, which is propability of 0.44, which is significantly higher. It has to be noted that there was so few famielies living apart that this is not definitive.
alc %>% group_by(high_use, g3) %>% summarise(count = n())
#worked differently then expected: in 38 situations parents lived apart and there´s 0.37 propability that student is high user. In situation where families lived together (364), 160 students reported high use, which is propability of 0.44, which is significantly higher. It has to be noted that there was so few famielies living apart that this is not definitive.
alc %>% group_by(high_use, G3) %>% summarise(count = n())
#worked differently then expected: in 38 situations parents lived apart and there´s 0.37 propability that student is high user. In situation where families lived together (364), 160 students reported high use, which is propability of 0.44, which is significantly higher. It has to be noted that there was so few famielies living apart that this is not definitive.
alc %>% group_by(G3, high_use) %>% summarise(count = n())
#Was right, lets seee how i can show it.
qplot(alc_use,data=alc)
#Was right, lets seee how i can show it.
qplot(high_use, absences,data=alc)
qplot(sex,data=alc)
qplot(sex, absences, data=alc)
#Was right, lets seee how i can show it.
g1 <- qplot(high_use, absences,data=alc)
#Was right, lets seee how i can show it.
g1 <- qplot(high_use, absences,data=alc)
g1
g1
g2 <- ggplot(alc, aes(x = high_use, y = absences))
g2
g2 + geom_boxplot() + ylab("grade")
g2 + geom_boxplot()
g1 + geom_boxplot() + ggtitle("Student absences by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = absences))
g2 + geom_boxplot() + ggtitle("Student absences by alcohol consumption and sex")
g2 <- ggplot(alc, aes(x = high_use, y = sex))
g2 + geom_boxplot()
g2 <- ggplot(alc, aes(x = sex, y = high_use))
g2 + geom_boxplot()
g3 <- ggplot(alc, aes(x = high_use, y = Pstatus))
g3 + geom_boxplot()
#Was right, lets see how i can show it.
g1 <- ggplot(alc, aes(x = high_use, y = absences))
g1 + geom_boxplot() + ggtitle("Student absences by alcohol consumption and sex")
g4 <- ggplot(alc, aes(x = high_use, y = G3))
g4 + geom_boxplot()
m <- glm(high_use ~ absences + sex + Pstatus + G3, data = alc, family = "binomial")
m
m
summary(m)
coef(m)
g2 <- ggplot(alc, aes(x = sex, y = high_use))
g2 + geom_boxplot()
m <- glm(high_use ~ absences + sex + Pstatus + G3, data = alc, family = "binomial")
summary(m)
table(alc$high_use,alc$sex)
table(alc$high_use,alc$absences)
table(alc$high_use,alc$Pstatus)
table(alc$high_use,alc$G3)
table(alc$high_use)
#Was right, lets see how i can show it.
g1 <- ggplot(alc, aes(x = high_use, y = absences))
g1 + geom_boxplot() + ggtitle("Student absences by alcohol consumption and sex")
m
print(m)
coef(m)
confint(m)
OR <- coef(m) %>% exp
OR
CI
CI <- confint(m) %>% exp
CI
OR
OR <- coef(m) %>% exp
OR
CI <- confint(m) %>% exp
CI
cbind(OR, CI)
dens_fail <- ggplot(alc, aes(x = failures, fill = high_use)) +
geom_bar(position="fill")
dens_fail
dens_fail <- ggplot(alc, aes(x = absences, fill = high_use)) +
geom_bar(position="fill")
dens_fail
dens_fail <- ggplot(alc, aes(x = sex, fill = high_use)) +
geom_bar(position="fill")
dens_fail
dens_fail <- ggplot(alc, aes(x = pstatus, fill = high_use)) +
geom_bar(position="fill")
dens_fail
dens_fail <- ggplot(alc, aes(x = Pstatus, fill = high_use)) +
geom_bar(position="fill")
dens_fail
dens_fail <- ggplot(alc, aes(x = G3, fill = high_use)) +
geom_bar(position="fill")
dens_fail
alc %>% group_by(high_use, absences) %>% summarise(count = n())
#Also right.
alc %>% group_by(high_use, sex) %>% summarise(count = n())
alc %>% group_by(G3, high_use) %>% summarise(count = n())
g1 <- ggplot(alc, aes(x = high_use, y = absences))
g1 + geom_boxplot() + ggtitle("Student absences by alcohol consumption and sex")
abs <- ggplot(alc, aes(x = high_use, fill = G3)) +
geom_bar(position="fill")
g1 <- ggplot(alc, aes(x = absences, y = high_use))
g1 + geom_boxplot() + ggtitle("Student absences by alcohol consumption and sex")
g1 <- ggplot(alc, aes(x = high_use, y = absences))
g1 + geom_boxplot() + ggtitle("Student absences by alcohol consumption and sex")
m <- glm(high_use ~ absences + sex + Pstatus + G3, data = alc, family = "binomial")
summary(m)
coef(m)
coef(m)
summary(m)
coef(m)
confint(m)
OR <- coef(m) %>% exp
CI <- confint(m) %>% exp
cbind(OR, CI)
m <- glm(high_use ~ absences + sex + Pstatus + G3, data = alc, family = "binomial")
summary(m)
coef(m)
confint(m)
OR <- coef(m) %>% exp
CI <- confint(m) %>% exp
cbind(OR, CI)
g2 <- ggplot(alc, aes(x = high_use, y = G3))
g2 + geom_boxplot()
g2 + geom_dotplot()
g2 + geom_point()
g3 <- qplot(high_use, G3, data = alc)
g3
g2 + geom_pointrange()
g2 + GeomBar
g2 + geom_curve()
g2 + geom_boxplot()
cbind(OR, CI)
abs <- ggplot(alc, aes(x = G3, fill = high_use)) +
geom_bar(position="fill")
abs
vars <- c("high_use","G3","absences","sex")
ggpairs(alc, columns = vars, mapping = aes(col = sex, alpha = 0.3), lower = list(combo = wrap("facethist")))
g3 <- ggpairs(alc, columns = vars, mapping = aes(col = sex, alpha = 0.3), lower = list(combo = wrap("facethist")))
ggpairs(alc, columns = vars, mapping = aes(col = sex, alpha = 0.3), lower = list(combo = wrap("facethist")))
ggpairs(alc, columns = vars, mapping = aes(alpha = 0.3), lower = list(combo = wrap("facethist")))
m <- glm(high_use ~ absences + sex + Pstatus + G3, data = alc, family = "binomial")
summary(m)
#Pstatus is not significant so it will be dropped.
m <- glm(high_use ~ absences + sex + G3, data = alc, family = "binomial")
summary(m)
coef(m)
OR <- coef(m) %>% exp
CI <- confint(m) %>% exp
cbind(OR, CI)
m <- glm(alc$high_use ~ absences, sex, g3, data = alc, family = "binominal")
m <- glm(alc$high_use ~ absences, sex, g3, data = alc, family = "binomial")
m <- glm(alc$high_use ~ absences, sex, g3, data = alc, family = "binomial")
m <- glm(high_use ~ absences, sex, g3, data = alc, family = "binomial")
m <- glm(high_use ~ absences, sex, G3, data = alc, family = "binomial")
m <- glm(high_use ~ failures + absences + sex, data = alc, family = "binomial")
m <- glm(high_use ~ absences + sex + G3 + data = alc, family = "binomial")
m <- glm(high_use ~ absences + sex + G3, data = alc, family = "binomial")
m
alc <- mutata(alc, prediction = alc$probabilities)
alc <- mutate(alc, prediction = alc$probabilities)
alc <- mutate(alc, probability = probabilities)
m <- glm(high_use ~ absences + sex + G3, data = alc, family = "binomial")
probabilities <- predict(m, type = "response")
alc <- mutate(alc, probability = probabilities)
alc <- mutate(alc, prediction = alc$probabilities)
alc <- mutate(alc, prediction = alc$probabilities>0.5)
alc <- mutate(alc, prediction = alc$probability>0.5)
select(alc, G3, absences, sex, high_use, probability, prediction) %>% tail(10)
m <- glm(high_use ~ failures, absences + sex + G3, data = alc, family = "binomial")
probabilities <- predict(m, type = "response")
alc <- mutate(alc, prediction = alc$probability>0.5)
m <- glm(high_use ~ failures, absences + sex + G3, data = alc, family = "binomial")
m <- glm(high_use ~ absences + sex + G3, data = alc, family = "binomial")
m <- glm(high_use ~ absences + sex + failures + G3, data = alc, family = "binomial")
probabilities <- predict(m, type = "response")
alc <- mutate(alc, probability = probabilities)
alc <- mutate(alc, prediction = alc$probability>0.5)
select(alc, G3, absences, sex, high_use, probability, prediction) %>% tail(10)
m <- glm(high_use ~ absences + sex + G3, data = alc, family = "binomial")
probabilities <- predict(m, type = "response")
alc <- mutate(alc, probability = probabilities)
alc <- mutate(alc, prediction = alc$probability>0.5)
select(alc, G3, absences, sex, high_use, probability, prediction) %>% tail(10)
m <- glm(high_use ~ absences + sex + failures+ G3, data = alc, family = "binomial")
probabilities <- predict(m, type = "response")
alc <- mutate(alc, probability = probabilities)
alc <- mutate(alc, prediction = alc$probability>0.5)
select(alc, G3, absences, sex, high_use, probability, prediction) %>% tail(10)
table(high_use = alc$high_use, prediction = alc$prediction)
g <- ggplot(alc_data, aes(x = probability, y = high_use, col = prediction))
g <- ggplot(alc, aes(x = probability, y = high_use, col = prediction))
g + geom_point()
g <- ggplot(alc, aes(x = probability, y = high_use, col = prediction))
g + geom_point()
table(high_use = alc$high_use, prediction = alc$prediction)
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
m <- glm(high_use ~ absences + sex + G3, data = alc, family = "binomial")
probabilities <- predict(m, type = "response")
alc <- mutate(alc, probability = probabilities)
alc <- mutate(alc, prediction = alc$probability>0.5)
select(alc, G3, absences, sex, high_use, probability, prediction) %>% tail(10)
table(high_use = alc$high_use, prediction = alc$prediction)
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
m <- glm(high_use ~ absences + failures + sex + G3, data = alc, family = "binomial")
probabilities <- predict(m, type = "response")
alc <- mutate(alc, probability = probabilities)
alc <- mutate(alc, prediction = alc$probability>0.5)
select(alc, G3, absences, sex, high_use, probability, prediction) %>% tail(10)
table(high_use = alc$high_use, prediction = alc$prediction)
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
g <- ggplot(alc, aes(x = probability, y = high_use, col=prediction))
g + geom_point()
m <- glm(high_use ~ absences  + sex + G3, data = alc, family = "binomial")
g <- ggplot(alc, aes(x = probability, y = high_use, col=prediction))
g + geom_point()
m <- glm(high_use ~ absences  + sex + G3, data = alc, family = "binomial")
alc <- mutate(alc, probability = probabilities)
alc <- mutate(alc, prediction = alc$probability>0.5)
select(alc, G3, absences, sex, high_use, probability, prediction) %>% tail(10)
table(high_use = alc$high_use, prediction = alc$prediction)
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
g <- ggplot(alc, aes(x = probability, y = high_use, col=prediction))
g + geom_point()
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
m <- glm(high_use ~ absences + sex + G3, data = alc, family = "binomial")
probabilities <- predict(m, type = "response")
alc <- mutate(alc, probability = probabilities)
alc <- mutate(alc, prediction = alc$probability>0.5)
select(alc, G3, absences, sex, high_use, probability, prediction) %>% tail(10)
table(high_use = alc$high_use, prediction = alc$prediction)
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
loss_func(class = alc$high_use, prob = alc$probability)
m <- glm(high_use ~ absences + failures + sex + G3, data = alc, family = "binomial")
probabilities <- predict(m, type = "response")
alc <- mutate(alc, probability = probabilities)
alc <- mutate(alc, prediction = alc$probability>0.5)
select(alc, G3, absences, sex, high_use, probability, prediction) %>% tail(10)
table(high_use = alc$high_use, prediction = alc$prediction)
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
loss_func(class = alc$high_use, prob = alc$probability)
m <- glm(high_use ~ absences + sex + G3, data = alc, family = "binomial")
probabilities <- predict(m, type = "response")
alc <- mutate(alc, probability = probabilities)
alc <- mutate(alc, prediction = alc$probability>0.5)
select(alc, G3, absences, sex, high_use, probability, prediction) %>% tail(10)
table(high_use = alc$high_use, prediction = alc$prediction)
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
g <- ggplot(alc, aes(x = probability, y = high_use, col=prediction))
g + geom_point()
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
loss_func(class = alc$high_use, prob = alc$probability)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
loss_func(class = alc$high_use, prob = alc$probability)
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
m <- glm(high_use ~ absences + failures + sex + G3, data = alc, family = "binomial")
probabilities <- predict(m, type = "response")
alc <- mutate(alc, prediction = alc$probability>0.5)
select(alc, G3, absences, sex, high_use, probability, prediction) %>% tail(10)
table(high_use = alc$high_use, prediction = alc$prediction)
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
loss_func(class = alc$high_use, prob = alc$probability)
# K-fold cross-validation
library(boot)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m, K = 10)
cv
cv$delta[1]
m <- glm(high_use ~ absences + Pstatus + sex + G3, data = alc, family = "binomial")
probabilities <- predict(m, type = "response")
alc <- mutate(alc, probability = probabilities)
alc <- mutate(alc, prediction = alc$probability>0.5)
select(alc, G3, absences, sex, high_use, probability, prediction) %>% tail(10)
table(high_use = alc$high_use, prediction = alc$prediction)
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
g <- ggplot(alc, aes(x = probability, y = high_use, col=prediction))
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
m <- glm(high_use ~ absences + Pstatus + sex + G3, data = alc, family = "binomial")
probabilities <- predict(m, type = "response")
alc <- mutate(alc, probability = probabilities)
alc <- mutate(alc, prediction = alc$probability>0.5)
select(alc, G3, absences, sex, high_use, probability, prediction) %>% tail(10)
table(high_use = alc$high_use, prediction = alc$prediction)
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
g <- ggplot(alc, aes(x = probability, y = high_use, col=prediction))
g + geom_point()
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
loss_func(class = alc$high_use, prob = alc$probability)
cv <- cv.glm(data = alc, cost = loss_func, glmfit = m, K = 10)
cv$delta[1]
